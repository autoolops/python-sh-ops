上节课复习：
    1、字符编码
        字符编码分类：
            gbk：汉字2bytes  英文1bytes
            utf-8：汉字3bytes 英文1bytes

            unicode：2bytes

            内存：unicode
            硬盘：gbk，utf-8

        编码与解码：
            unincode------encode-------->utf-8
            unincode<------decode<--------utf-8


        python解释器执行文件：python test.py
            1、先启动python解释器
            2、解释器把文件内容从硬盘读到内存
            3、解释执行，识别python语法


        文件头：
            解释器默认编码：
                python2-》ASCII
                python3-》UTF-8


            在文件开头加一行，来告诉解释器使用指定的编码而非默认的
            #coding:utf-8

        字符串类型：
            python2中；字符串类型的编码格式使用文件头指定的编码
                #coding:gbk

                '你好'.decode('gbk')

            python3中；字符串类型的编码格式统一使用unicode

                res='你好'.encode('utf-8')
                res.decode('utf-8')


        乱码问题的根源：
            编码的时候用了一种格式，而解码的时候用另外一种格式


    2、文件处理
        fobj=open('文件的路径',mode='r',encoding='utf-8’)
        fobj.read()
        fobj.close()

        fobj.read()


        with open('文件的路径1',mode='r',encoding='utf-8’) as f1,\
            open('文件的路径2',mode='r',encoding='utf-8’) as f2:
            代码1
            代码2
            代码3


        encoding='utf-8’
            强调：
            1、打开的文件必须是文本文件
            2、encoding指定的字符编码一定要跟文件存时候用的编码一致
            3、不指定encoding则默认使用操作系统默认的编码


        文件的打开模式
            r===>rt
            w-->wt
            a-->at

            文件模式下：读写的单位都是以str为单位
                f.read()
                f.write()

            rb
            wb
            ab
            Bytes模式下：读写的单位都是以bytes为单位，在该模式下一定更不能指定encoding参数


        文件修改：
              方式一：
                    先把文件内容一次性读入内存，在内存中修改完毕后，再覆盖会硬盘
                    优点：在文件修改期间始终保存一份数据
                    缺点：在文件内容过大的情况下，会占用过多的内存
              方式二：
                    读一行内容到内存，修改完毕后存入一个新文件中，
                    整体修改完毕后，再删除源文件，将新文件改名为源文件名

                    优点：
                        同一时间在内存中只有一行内容，不过过多的占用内存

                    缺点：
                        在文件修改期间始终保存两份数据


    3、函数基础
        1、为什么要用函数
            之前没有用函数时
                1、程序组织结构不清晰，可读性差
                2、代码冗余
                3、可扩展性差

        2、什么是函数
            具备某一功能的工具即函数
            事先准备工具的过程即函数的定义
            拿来就用即函数的调用


        3、如何用函数
            函数的使用的必须遵循：先定义，后调用的原则

            定义一个函数就类似于定义一个变量

        4、定义函数










今日内容：
    1、函数参数
    2、函数嵌套
    3、装饰器
        3.1、名称空间与作用域
        3.2、函数对象
        3.3、闭包函数

    4、列表生成式，字典生成式，匿名函数
    5、内置函数




涛哥：20
宝贝：20