上节课复习：
    1、什么是函数？
        在程序中函数就是具备某一功能的工具

    2、为什么要用函数？
        解决：
            1、代码的组织结构不清晰
            2、代码冗余
            3、可扩展性差

    3、如何用函数？
        必须遵循：先定义后调用

        定义函数
            def func(arg1,arg2,...):
                """文档注释"""
                code1
                code2
                code3
                code4
                ....
                return 值

        强调：
            1、定义函数只检测语法不执行函数体代码,函数无论嵌套多少层都会检测起语法
            2、定义函数就相当于定义了一个变量，函数名等同于变量名，以后但凡使用函数都需要通过函数名


        调用函数:
            func()

            强调：
                只有在调用函数时才会执行函数体代码

    4、函数的返回值
        def f1（x,y）: #x=1 y=2
            return x+y

        res=f1(1,2)


        return：
            1、函数内可有多个return，但只执行一次函数就立刻结束，并且将return后的返回值当做本次调用的结果返回
            2、返回值无类型限制
            3、返回值无个数限制，可以（值1，值2，值3）一次性返回多个值



    5、函数的参数
        形参与实参

        形参：
            1、位置形参：必须被传值
                def func(x,y):
                    pass

            2、默认形参：
                def func(x,y,z=1):
                    pass

            3、*args，**kwargs

        实参：
            1、位置实参:与位置形参一一对应
                func（1，2）

            2、关键字实参：可以完全不用按照实参的顺序，当仍然能指名道姓地为形参传值
                func(y=1,x=2)

                注意点：
                    func(1,y=2)
                    func(y=2,1)
                    func(1,2,y=3)



    6、函数嵌套
        函数的嵌套调用
            def f1():
                pass

            def f2():
                pass

            def f3():
                f1()
                f2()

            f3()
        函数的嵌套定义
            def f1():
                def inner():
                    pass

    7、名称空间与作用域


    8、函数对象
        def func():
            pass


        x=func
        f(func)
        [func,]

    9、闭包函数
        闭包函数=函数嵌套+作用域+函数对象


    10、装饰器：
        闭包函数的一种应用










今日内容：
    1、迭代器
        什么是可迭代对象，什么是迭代器对象？（*****）
        迭代器的使用？（*****）
        迭代器的优缺点（*****）
        for的工作机制（*****）


    2、生成器
        自定义迭代器的方式（****）
            在函数体内使用：yield 值

        表达式形式yield的使用（***）
            food=yield

    3、面向过程编程（*****）
    4、三元表达式（*****）
    5、列表生成式、字典生成式与生成器表达式（*****）
    6、匿名函数与内置函数(*****)
        max *****
        min *****
        sorted *****

        map     **
        filter  **


    8、模块的使用
    9、软件开发的目录规范

    10、包的使用















